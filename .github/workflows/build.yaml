name: Build
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
concurrency:
  group: ${{ github.workflow }}/${{ github.ref_type }}/${{ github.ref_name }}
  cancel-in-progress: true
permissions:
  contents: none
  deployments: none
  actions: none
  checks: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  lint-client:
    name: Lint Client
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: CLANG64
          location: D:\msys2
          update: true
          release: true
          install: base-devel mingw-w64-clang-x86_64-clang
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Run Code Linter
        run: |-
            task lint:local:fix || true
            git status
            git diff
            task lint:ci
  lint-server:
    name: Lint Server
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Run Code Linter
        run: task lint:ci
  build-client:
    name: Build Client
    runs-on: windows-latest
    needs: lint-client
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: CLANG64
          location: D:\msys2
          update: true
          release: true
          install: base-devel mingw-w64-clang-x86_64-clang
      - name: Get Clang Path
        id: clang
        run: |-
          echo "dir=${{ steps.msys2.outputs.msys2-location }}\clang64\bin" >> $env:GITHUB_OUTPUT
          ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang --version
          ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang++ --version
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Build
        env:
          CC: ${{ steps.clang.outputs.dir }}\clang
          CXX: ${{ steps.clang.outputs.dir }}\clang++
        run: task build:client
      - name: ZIP Artifacts
        run: Compress-Archive -Path .\bin\client -DestinationPath client.zip
      - name: Get OS & Arch
        id: os_arch
        run: |-
          echo "os=$(go env GOOS)" >> $env:GITHUB_OUTPUT
          echo "arch=$(go env GOARCH)" >> $env:GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.zip
          path: ./client.zip
          compression-level: 0
          retention-days: 3
  build-server:
    name: Build Server
    runs-on: ubuntu-24.04
    needs: lint-server
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Build
        run: task build:server
      - name: Tar Artifacts
        run: tar -cvf server.tar ./bin/server/
      - name: Get OS & Arch
        id: os_arch
        run: |-
          echo "os=$(go env GOOS)" >> $GITHUB_OUTPUT
          echo "arch=$(go env GOARCH)" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.tar
          path: ./server.tar
          compression-level: 0
          retention-days: 3
