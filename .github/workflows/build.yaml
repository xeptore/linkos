name: Build
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}/${{ github.ref_type }}/${{ github.ref_name }}
  cancel-in-progress: true
permissions:
  contents: none
  deployments: none
  actions: none
  checks: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  lint-client:
    name: Lint Client
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: CLANG64
          location: D:\msys2
          update: true
          release: true
          install: base-devel mingw-w64-clang-x86_64-clang
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Run Code Linter
        run: task lint:ci
  lint-server:
    name: Lint Server
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Run Code Linter
        run: task lint:ci
  build-client:
    name: Build Client
    runs-on: windows-latest
    needs: lint-client
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: CLANG64
          location: D:\msys2
          update: true
          release: true
          install: base-devel mingw-w64-clang-x86_64-clang unzip mingw-w64-clang-x86_64-imagemagick git
      - name: Get Clang Path
        id: clang
        run: |-
          echo "dir=${{ steps.msys2.outputs.msys2-location }}\clang64\bin" >> $env:GITHUB_OUTPUT
          ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang --version
          ${{ steps.msys2.outputs.msys2-location }}\clang64\bin\clang++ --version
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Prepare Icons
        shell: msys2 {0}
        run: |-
          set -ex

          # Commands from: https://tewarid.github.io/2020/09/03/create-a-windows-icon-file-using-imagemagick.html
          # Sizes from: https://learn.microsoft.com/en-us/windows/apps/design/style/iconography/app-icon-construction
          magick ./res/linkos.png -resize 16x16 -depth 32 -colors 256 -alpha on ./res/16.png
          magick ./res/linkos.png -resize 32x32 -depth 32 -colors 256 -alpha on ./res/32.png
          magick ./res/linkos.png -resize 48x48 -depth 32 -colors 256 -alpha on ./res/48.png
          magick ./res/linkos.png -resize 64x64 -depth 32 -colors 256 -alpha on ./res/64.png
          magick ./res/linkos.png -resize 128x128 -depth 32 -colors 256 -alpha on ./res/128.png
          magick ./res/linkos.png -resize 256x256 -depth 32 -colors 256 -alpha on ./res/256.png
          magick ./res/16.png ./res/32.png ./res/48.png ./res/64.png ./res/128.png ./res/256.png ./res/linkos.ico
      - name: Set Manifest
        run: |-
          go install github.com/akavel/rsrc@v0.10.2
          # Resource docs:
          #  - https://learn.microsoft.com/en-us/windows/win32/sbscs/application-manifests
          #  - https://gist.github.com/richlander/5b24dd2d3608cd7111222e621e7e342b
          #  - https://superuser.com/a/605012
          & "$(go env GOPATH)\bin\rsrc.exe" -ico ./res/linkos.ico -manifest ./res/linkos.manifest.xml
      - name: Generate Version
        id: version
        shell: msys2 {0}
        run: |-
          set -x
          version=$(date -u -d @$(git show -s --format=%ct ${{ github.sha }}) +'%Y%m%d%H%M')
          echo "version=${version}" >> $GITHUB_OUTPUT
      - name: Build
        env:
          VERSION: ${{ steps.version.outputs.version }}\clang
          CC: ${{ steps.clang.outputs.dir }}\clang
          CXX: ${{ steps.clang.outputs.dir }}\clang++
        run: task build:client
      - name: Compress Executable
        shell: msys2 {0}
        run: |
          set -ex

          VERSION=4.2.4
          temp_dir=$(mktemp -d)
          cd "$temp_dir"
          wget -q "https://github.com/upx/upx/releases/download/v${VERSION}/upx-${VERSION}-win64.zip"
          unzip "upx-${VERSION}-win64.zip"
          "./upx-${VERSION}-win64/upx.exe" --no-color --mono --no-progress --ultra-brute --strip-relocs=0 --all-methods --no-backup --all-filters "${{ github.workspace }}/bin/client/linkos.exe"
          "./upx-${VERSION}-win64/upx.exe" --test "${{ github.workspace }}/bin/client/linkos.exe"
          rm -rfv "${temp_dir}"
      - name: Get OS & Arch
        id: os_arch
        run: |-
          echo "os=$(go env GOOS)" >> $env:GITHUB_OUTPUT
          echo "arch=$(go env GOARCH)" >> $env:GITHUB_OUTPUT
      - name: ZIP Artifacts
        working-directory: .\bin\client\
        run: Compress-Archive -CompressionLevel Optimal -Path '*' -DestinationPath "${{ github.workspace }}\client_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.zip"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.zip
          path: ./client_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.zip
          compression-level: 0
          retention-days: 3
  build-server:
    name: Build Server
    runs-on: ubuntu-24.04
    needs: lint-server
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
          check-latest: false
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Build
        run: task build:server
      - name: Compress Executable
        run: |
          set -ex

          VERSION=4.2.4
          temp_dir=$(mktemp -d)
          cd "$temp_dir"
          wget -qO- "https://github.com/upx/upx/releases/download/v${VERSION}/upx-${VERSION}-amd64_linux.tar.xz" | tar -xJvf - "upx-${VERSION}-amd64_linux/upx"
          "./upx-${VERSION}-amd64_linux/upx" --no-color --mono --no-progress --ultra-brute --all-methods --no-backup --all-filters '${{ github.workspace }}/bin/server/linkos'
          "./upx-${VERSION}-amd64_linux/upx" --test '${{ github.workspace }}/bin/server/linkos'
          rm -rfv "${temp_dir}"
      - name: Get OS & Arch
        id: os_arch
        run: |-
          echo "os=$(go env GOOS)" >> $GITHUB_OUTPUT
          echo "arch=$(go env GOARCH)" >> $GITHUB_OUTPUT
      - name: Tar Artifacts
        working-directory: ./bin/server
        run: tar -cvf '${{ github.workspace }}/server_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.tar' .
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.tar
          path: ./server_${{ steps.os_arch.outputs.os }}_${{ steps.os_arch.outputs.arch }}.tar
          compression-level: 0
          retention-days: 3
  tag:
    name: Tag
    needs: 
      - build-client
      - build-server
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.generate.outputs.tag_name }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate
        id: generate
        run: |-
          set -x
          tag_name=$(date -u -d @$(git show -s --format=%ct ${{ github.sha }}) +'%Y%m%d%H%M')
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
      - name: Create
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fetch_all_tags: true
          create_annotated_tag: true
          tag_prefix: ""
          custom_tag: ${{ steps.generate.outputs.tag_name }}
  release:  
    name: Release
    permissions:
      contents: write
    timeout-minutes: 10
    needs:
      - tag
    runs-on: ubuntu-24.04
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v2.1.0
        continue-on-error: true
        id: release_try_0
        with:
          name: ${{ needs.tag.outputs.tag_name }}
          prerelease: false
          draft: false
          tag_name: ${{ needs.tag.outputs.tag_name }}
          fail_on_unmatched_files: true
          files: |-
            client_windows_amd64.zip
            server_linux_amd64.tar
      - name: Release (Retry 1)
        uses: softprops/action-gh-release@v2.1.0
        continue-on-error: true
        if: steps.release_try_0.outcome == 'failure'
        id: release_try_1
        with:
          name: ${{ needs.tag.outputs.tag_name }}
          prerelease: false
          draft: false
          tag_name: ${{ needs.tag.outputs.tag_name }}
          fail_on_unmatched_files: true
          files: |-
            client_windows_amd64.zip
            server_linux_amd64.tar
      - name: Release (Retry 2)
        uses: softprops/action-gh-release@v2.1.0
        continue-on-error: true
        if: steps.release_try_1.outcome == 'failure'
        id: release_try_2
        with:
          name: ${{ needs.tag.outputs.tag_name }}
          prerelease: false
          draft: false
          tag_name: ${{ needs.tag.outputs.tag_name }}
          fail_on_unmatched_files: true
          files: |-
            client_windows_amd64.zip
            server_linux_amd64.tar
      - name: Release (Retry 3)
        uses: softprops/action-gh-release@v2.1.0
        continue-on-error: false
        if: steps.release_try_2.outcome == 'failure'
        id: release_try_3
        with:
          name: ${{ needs.tag.outputs.tag_name }}
          prerelease: false
          draft: false
          tag_name: ${{ needs.tag.outputs.tag_name }}
          fail_on_unmatched_files: true
          files: |-
            client_windows_amd64.zip
            server_linux_amd64.tar
